var N=null,E="",T="t",U="u",searchIndex={};
var R=["jsvalue","To start the Wasm application, wasm_bindgen runs this…","rootrenderingcomponent","usize","information for debugging","size2d","is_fullscreen","constructor","update_intern_cache","gamedata","vdomweak","create_webrequest","create web request from string","request","update a field in the struct","description","my_ws_uid","my_nickname","my nickname","my_player_number","What player am I","player_turn","to not check it all the time","string","the name of the extern javascript function","websocket","code flow from this status","on click","msg player click","code flow for this status","on msg ack","update game data","render div","wsmessage","mem6::divplayersandscoresmod","result","try_from","try_into","mem6::divrulesanddescriptionmod","borrow_mut","value_from","approx_into","value_into","approx_from","as_any_mut","mem6::gamedatamod","type_id","to_owned","clone_into","borrow","typeid","mem6::rootrenderingcomponentmod","serialize","deserialize","This rendering will be rendered and then cached . It will…","PlayersAndScores","RulesAndDescription","GameMetadata","GamesMetadata","GameConfig","MsgInQueue","GameData","CardStatusCardFace","RootRenderingComponent"];

searchIndex["mem6"]={"doc":"mem6","i":[[5,"run","mem6",R[1],N,[[],[[R[35],[R[0]]],[R[0]]]]],[5,"__wasm_bindgen_generated_run",E,R[1],N,[[]]],[0,"ackmsgmod",E,"acknowledge msg",N,N],[5,"remove_ack_msg_from_queue","mem6::ackmsgmod","remove ack msg from queue - return true if there are no…",N,[[[R[2]],[R[3]]],["bool"]]],[5,"prepare_for_ack_msg_waiting",E,"prepare for ack msg waiting - return random msg_id",N,[[[R[2]],[R[10]]],[R[3]]]],[5,"send_msg_and_write_in_queue",E,"send msg and write in queue",N,[[[R[2]],[R[33]],[R[3]]]]],[5,"send_ack",E,"send ack",N,[[[R[2]],["msgackkind"],[R[3]]]]],[0,"divcardmonikermod","mem6","renders the card moniker (card name/title)",N,N],[5,"div_grid_card_moniker","mem6::divcardmonikermod","the header can show only the game title or two card…",N,[[[R[2]],["bump"]],[["node"],["vec",["node"]]]]],[5,"calc_font_size",E,"when the lenght is bigger, the fontsize get smaller if the…",N,[[[R[3]]],["f64"]]],[0,"divfordebuggingmod","mem6",R[4],N,N],[5,"div_for_debugging","mem6::divfordebuggingmod",R[4],N,[[[R[2]],["bump"]],["node"]]],[0,"divfullscreenmod","mem6","instruction and button for fullscreen",N,N],[5,R[6],"mem6::divfullscreenmod","check the fullscreen_element. works only on android",N,[[[R[2]]],["bool"]]],[5,"div_fullscreen",E,"render the div for fullscreen",N,[[["bump"],["bool"]],[["node"],["vec",["node"]]]]],[0,"divgametitlemod","mem6","renders the game title",N,N],[5,"div_game_title","mem6::divgametitlemod","the header shows the game title",N,[[[R[2]],["bump"]],[["node"],["vec",["node"]]]]],[0,"divgridcontainermod","mem6","renders the grid container with the images and most…",N,N],[5,"div_grid_container","mem6::divgridcontainermod","prepare the grid container",N,[[[R[5]],[R[2]],["bump"]],["node"]]],[5,"div_grid_items",E,"prepare a vector for the Virtual Dom for 'css grid' item…",N,[[[R[2]],["bump"]],[["node"],["vec",["node"]]]]],[5,"div_grid_item",E,"on click is the most important part and here is more or…",N,[[["bump"],["str"],[R[2]]],["node"]]],[5,"play_sound",E,"play sound mp3",N,[[[R[2]],[R[3]]]]],[5,"grid_width",E,"grid width in pixels",N,[[],[R[3]]]],[5,"grid_height",E,"grid height in pixels",N,[[],[R[3]]]],[5,"max_grid_size",E,"calculate max with and height for a grid in pixels",N,[[[R[2]]],[R[5]]]],[5,"usize_window_inner_height",E,"return window inner height the size of the visible part of…",N,[[],[R[3]]]],[5,"usize_window_inner_width",E,"return window inner width the size of the visible part of…",N,[[],[R[3]]]],[5,"usize_window_inner_width_but_max_600",E,"return window inner width, but maximum 600px the size of…",N,[[],[R[3]]]],[17,"SRC_FOR_CARD_FACE_DOWN",E,"fixed filename for card face down",N,N],[0,"divplayeractionsmod","mem6","renders the div to inform player what to do next and get a…",N,N],[5,"div_player_actions_from_game_status","mem6::divplayeractionsmod","render html element to inform player what to do and get a…",N,[[[R[2]],["bump"]],["node"]]],[5,"div_unpredicted",E,"render unpredicted",N,[[[R[2]],["bump"]],["node"]]],[0,"divplayersandscoresmod","mem6","renders the div that shows players and scores",N,N],[3,R[55],R[34],"Render Component: player score Its private fields are a…",N,N],[12,R[21],E,"whose turn is now:  player 1 or 2",0,N],[12,R[17],E,R[18],0,N],[12,"my_points",E,"my points",0,N],[12,R[19],E,R[20],0,N],[12,R[16],E,"my ws client instance unique id.",0,N],[11,"new",E,R[7],0,[[[R[3]]],["self"]]],[11,R[8],E,"copies the data from game data to internal cache internal…",0,[[["self"],[R[9]]],["bool"]]],[0,"divrulesanddescriptionmod","mem6","renders the div that shows rules and descriptions All is a…",N,N],[3,R[56],R[38],"Render Component: The static parts can be cached easily.",N,N],[12,R[6],E,R[22],1,N],[5,"text_with_br_newline",E,"change the newline lines ending into  node",N,[[["bump"],["str"]],[["vec",["node"]],["node"]]]],[17,"GAME_RULES1",E,"Text of game rules. Multiline string literal just works.…",N,N],[17,"GAME_RULES2",E,E,N,N],[17,"GAME_DESCRIPTION",E,"game description",N,N],[11,"new",E,R[7],1,[[],["self"]]],[11,R[8],E,E,1,[[["self"],[R[9]]],["bool"]]],[0,"fetchmod","mem6","isolate/encapsulate fetch api in a module because it is…",N,N],[5,"fetch_response","mem6::fetchmod","The only public function that starts the code flow around…",N,[[["fn"],[R[10]],[R[13]]]]],[0,"fetchgamesmetadatamod","mem6","fetch the names of all games",N,N],[5,"fetch_games_metadata_request","mem6::fetchgamesmetadatamod","async fetch_response() for gamesmetadata.json",N,[[[R[23]],[R[10]]]]],[5,R[11],E,R[12],N,[[["str"]],[R[13]]]],[5,"set_game_metadata_from_json",E,R[14],N,[[[R[2]],[R[23]]]]],[0,"fetchgameconfigmod","mem6","fetch game_config",N,N],[5,"fetch_game_config_request","mem6::fetchgameconfigmod","async fetch_response() for gameconfig.json",N,[[[R[2]],[R[10]]]]],[5,R[11],E,R[12],N,[[["str"]],[R[13]]]],[5,"set_game_config_from_json",E,R[14],N,[[[R[2]],[R[23]]]]],[0,"fetchallimgsforcachemod","mem6","fetch all imgs for cache",N,N],[5,"fetch_all_img_for_cache_request","mem6::fetchallimgsforcachemod","fetch all imgs for the cache",N,[[[R[2]],[R[10]]]]],[5,R[11],E,R[12],N,[[["str"]],[R[13]]]],[5,"do_nothing",E,"do nothing",N,[[[R[2]],[R[23]]]]],[0,"gamedatamod","mem6","structs and methods around game data",N,N],[3,"Size2d",R[45],"2d size (any UM -pixel, items, percent)",N,N],[12,"hor",E,"horizontal",2,N],[12,"ver",E,"vertical",2,N],[3,R[57],E,"game metadata (for the vector)",N,N],[12,"folder",E,"folder",3,N],[12,"name",E,"name",3,N],[12,R[15],E,R[15],3,N],[3,R[58],E,"games metadata vector",N,N],[12,"vec_game_metadata",E,"vec game_metadata",4,N],[3,R[59],E,"game config",N,N],[12,"card_moniker",E,"card moniker - the text/name of the card the zero element…",5,N],[12,"img_filename",E,"img filenames",5,N],[12,"sound_filename",E,"sound filenames",5,N],[12,"card_width",E,"card image width",5,N],[12,"card_height",E,"card image height",5,N],[12,"grid_items_hor",E,"number of cards horizontally",5,N],[12,"grid_items_ver",E,"number of card vertically",5,N],[3,"Card",E,"all the data for one card",N,N],[12,"status",E,"card status",6,N],[12,"card_number_and_img_src",E,"field for src attribute for HTML element imagea and…",6,N],[12,"card_index_and_id",E,"field for id attribute for HTML element image contains the…",6,N],[3,R[60],E,"save the message in queue to resend it if timeout expires",N,N],[12,"player_ws_uid",E,"the player that must ack the msg",7,N],[12,"msg_id",E,"the msg id is a random number",7,N],[12,"msg",E,"the content of the message if it needs to be resend",7,N],[3,R[61],E,"game data",N,N],[12,R[16],E,"my ws client instance unique id. To not listen the echo to…",8,N],[12,R[17],E,R[18],8,N],[12,R[19],E,R[20],8,N],[12,"ws",E,"web socket. used it to send message onclick.",8,N],[12,"players",E,"players data as vector of player struct",8,N],[12,"players_ws_uid",E,"the json string for the ws server to send msgs to other…",8,N],[12,"game_status",E,"game status:…",8,N],[12,"card_grid_data",E,"vector of cards",8,N],[12,"card_index_of_first_click",E,"card index of first click",8,N],[12,"card_index_of_second_click",E,"card index of second click",8,N],[12,"game_name",E,"content folder name",8,N],[12,"asked_game_name",E,"invite asks for a specific game",8,N],[12,R[21],E,"whose turn is now:  player 1,2,3,...",8,N],[12,"content_folders",E,"content folders vector",8,N],[12,"games_metadata",E,"games meta data",8,N],[12,"game_config",E,"game_configs",8,N],[12,"error_text",E,"error text",8,N],[12,"href",E,"href",8,N],[12,"is_reconnect",E,"is reconnect",8,N],[12,R[6],E,R[22],8,N],[12,"msgs_waiting_ack",E,"vector of msgs waiting for ack. If the 3 sec timeout…",8,N],[12,"show_debug_info",E,"show debug info on the smartphone screen",8,N],[4,R[62],E,"the 3 possible statuss of one card",N,N],[13,"Down",E,"card face down",9,N],[13,"UpTemporary",E,"card face Up Temporary",9,N],[13,"UpPermanently",E,"card face up Permanently",9,N],[5,"prepare_players_ws_uid",E,"from the vector of players prepare a json string for the…",N,[[],[R[23]]]],[17,"_IMPL_SERIALIZE_FOR_Size2d",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_Size2d",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_GameMetadata",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_GameMetadata",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_GamesMetadata",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_GamesMetadata",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_GameConfig",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_GameConfig",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_CardStatusCardFace",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_CardStatusCardFace",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_Card",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_Card",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_MsgInQueue",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_MsgInQueue",E,E,N,N],[11,"prepare_random_data",E,"prepare new random data",8,[[["self"]]]],[11,"prepare_for_empty",E,"asociated function: before Accept, there are not random…",8,[[],[["vec",["card"]],["card"]]]],[11,"new",E,"constructor of game data",8,[[[R[3]],[R[25]]],["self"]]],[11,"is_status_for_grid_container",E,"the only status for rendering the grid container",8,[[["self"]],["bool"]]],[0,"javascriptimportmod","mem6","one single module to import javascript functions and…",N,N],[5,"javascriptdofullscreen","mem6::javascriptimportmod",R[24],N,[[]]],[5,"javascriptismobiledevice",E,R[24],N,[[],["bool"]]],[5,"do_fullscreen",E,"do full screen function - imported from javascript",N,[[]]],[5,"is_mobile_device",E,"is mobile device function - imported from javascript",N,[[],["bool"]]],[0,"divnicknamemod","mem6","loadand save nickname",N,N],[5,"div_nickname_input","mem6::divnicknamemod","render the nickname input",N,[[[R[2]],["bump"]],["node"]]],[5,"save_nickname_to_localstorage",E,"save nickname from html input elements to local storage…",N,[[[R[10]]]]],[5,"load_nickname",E,"load nickname from local storage",N,[[],[R[23]]]],[0,"logmod","mem6","logging in wasm",N,N],[5,"debug_write","mem6::logmod","debug write into sessionstorage",N,[[["str"]]]],[5,"now_string",E,"string of now time",N,[[],[R[23]]]],[0,"rootrenderingcomponentmod","mem6","renders the web page",N,N],[3,R[63],R[51],"Root Rendering Component has all the data needed for play…",N,N],[12,"game_data",E,"game data will be inside of Root",10,N],[12,"cached_players_and_scores",E,"subComponent 1: players and scores. The data is a cached…",10,N],[12,"cached_rules_and_description",E,"subComponent 2: the static parts can be cached.",10,N],[11,"new",E,"Construct a new `RootRenderingComponent` at the beginning…",10,[[[R[3]],[R[25]]],["self"]]],[11,"check_invalidate_for_all_components",E,"check invalidate render cache for all sub components",10,[[["self"]]]],[11,"reset",E,"reset the data to replay the game",10,[[["self"]]]],[0,"sessionstoragemod","mem6","for debugging texts accessible everywhere",N,N],[5,"add_to_begin_of_debug_text","mem6::sessionstoragemod","add to begin of debug text",N,[[["str"]]]],[5,"utf8_truncate",E,"utf8 truncate",N,[[[R[23]],[R[3]]]]],[5,"get_debug_text",E,"get debug text from session storage",N,[[],[R[23]]]],[5,"save_my_ws_uid",E,"save my_ws_uid to session storage",N,[[[R[3]]]]],[5,"load_my_ws_uid",E,"load my_ws_uid from session storage",N,[[],[R[3]]]],[0,"statusgamedatainitmod","mem6",R[26],N,N],[5,"on_click_start_game","mem6::statusgamedatainitmod","prepares the game data",N,[[[R[2]]]]],[5,"on_msg_start_game",E,"on game data init",N,[[[R[2]],[R[10]],["str"]]]],[0,"statusstartpagemod","mem6",R[26],N,N],[5,"div_start_page","mem6::statusstartpagemod","render invite ask begin, ask to play for multiple…",N,[[[R[2]],["bump"]],["node"]]],[5,"on_click_invite",E,"on click updates some data and sends msgs msgs will be…",N,[[[R[2]],[R[10]],["str"]]]],[5,"on_msg_invite",E,"msg invite",N,[[[R[23]],[R[3]],[R[2]]]]],[0,"statusinvitedmod","mem6",R[29],N,N],[5,"div_invited","mem6::statusinvitedmod","render asked",N,[[[R[2]],["bump"]],["node"]]],[5,"on_click_accept",E,R[27],N,[[[R[2]]]]],[5,"on_msg_accept",E,"msg accept play",N,[[[R[2]],[R[23]],[R[3]]]]],[5,"div_invite_accepted",E,"render play accepted",N,[[[R[2]],["bump"]],["node"]]],[0,"statusinvitingmod","mem6",R[26],N,N],[5,"div_inviting","mem6::statusinvitingmod","render",N,[[[R[2]],["bump"]],["node"]]],[0,"statusgameovermod","mem6",R[26],N,N],[5,"div_game_over","mem6::statusgameovermod","play again",N,[[[R[2]],["bump"]],["node"]]],[5,"on_msg_game_over",E,R[28],N,[[[R[2]]]]],[0,"status1stcardmod","mem6",R[26],N,N],[5,"on_click_1st_card","mem6::status1stcardmod",R[27],N,[[[R[2]],[R[3]],[R[10]]]]],[5,"on_msg_click_1st_card",E,"on msg",N,[[[R[2]],[R[3]]]]],[5,"on_msg_ack_click_1st_card",E,R[30],N,[[[R[2]],[R[3]]]]],[5,"update_on_1st_card",E,R[31],N,[[[R[2]]]]],[5,"div_on_1st_card",E,R[32],N,[[[R[2]],["bump"]],["node"]]],[0,"status2ndcardmod","mem6",R[26],N,N],[5,"on_click_2nd_card","mem6::status2ndcardmod","on second click The on click event passed by JavaScript…",N,[[[R[2]],[R[3]],[R[10]]]]],[5,"on_msg_click_2nd_card_point",E,R[28],N,[[[R[2]],[R[3]]]]],[5,"on_msg_ack_player_click2nd_card_point",E,"on msg ack player click2nd card",N,[[[R[2]],[R[3]]]]],[5,"update_click_2nd_card_point",E,R[28],N,[[[R[2]]]]],[5,"div_click_2nd_card",E,"render Play or Wait",N,[[[R[2]],["bump"]],["node"]]],[0,"statustaketurnbeginmod","mem6",R[29],N,N],[5,"on_click_take_turn_begin","mem6::statustaketurnbeginmod",R[27],N,[[[R[2]],[R[10]]]]],[5,"on_msg_take_turn_begin",E,"on msg",N,[[[R[2]],[R[3]]]]],[5,"on_msg_ack_take_turn_begin",E,R[30],N,[[[R[2]],[R[3]]]]],[5,"update_on_take_turn_begin",E,R[31],N,[[[R[2]]]]],[5,"div_take_turn_begin",E,R[32],N,[[[R[2]],["bump"]],["node"]]],[0,"statustaketurnendmod","mem6",R[26],N,N],[5,"on_click_take_turn_end","mem6::statustaketurnendmod",R[27],N,[[[R[2]],[R[10]]]]],[5,"on_msg_take_turn_end",E,"on msg",N,[[[R[2]],[R[3]]]]],[5,"on_msg_ack_take_turn_end",E,R[30],N,[[[R[2]],[R[3]]]]],[5,"update_on_take_turn_end",E,R[31],N,[[[R[2]]]]],[0,"statuswaitingackmsgmod","mem6",R[26],N,N],[5,"div_waiting_ack_msg","mem6::statuswaitingackmsgmod","waiting ack msg",N,[[[R[2]],["bump"]],["node"]]],[0,"utilsmod","mem6","small generic helper functions",N,N],[5,"ordinal_numbers","mem6::utilsmod","format ordinal numbers as string 1st, 2nd,3rd,...",N,[[[R[3]]],[R[23]]]],[0,"websocketcommunicationmod","mem6","module that cares about WebSocket communication",N,N],[5,"setup_ws_connection","mem6::websocketcommunicationmod","setup WebSocket connection",N,[[[R[23]],[R[3]]],[R[25]]]],[5,"setup_ws_msg_recv",E,"receive WebSocket msg callback.",N,[[[R[10]],[R[25]]]]],[5,"setup_ws_onerror",E,"on error write it on the screen for debugging",N,[[[R[10]],[R[25]]]]],[5,"setup_ws_onclose",E,"on close WebSocket connection",N,[[[R[10]],[R[25]]]]],[5,"setup_all_ws_events",E,"setup all ws events",N,[[[R[10]],[R[25]]]]],[5,"ws_send_msg",E,"generic send ws message",N,[[[R[33]],[R[25]]]]],[5,"on_response_ws_uid",E,"msg response with ws_uid, just to check.",N,[[[R[2]],[R[3]]]]],[0,"websocketreconnectmod","mem6","reconnection for websocket must be part of the application.",N,N],[5,"div_reconnect","mem6::websocketreconnectmod","render reconnect",N,[[[R[2]],["bump"]],["node"]]],[5,"on_msg_request_ws_uid",E,"send all data to reconnected player",N,[[[R[2]],[R[3]]]]],[5,"on_msg_all_game_data",E,"after reconnect receive allthe data from other player",N,[[[R[23]],["gamestatus"],[R[3]],[R[2]]]]],[11,"from",R[34],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[36],E,E,0,[[[U]],[R[35]]]],[11,R[37],E,E,0,[[],[R[35]]]],[11,R[39],E,E,0,[[["self"]],[T]]],[11,R[49],E,E,0,[[["self"]],[T]]],[11,R[46],E,E,0,[[["self"]],[R[50]]]],[11,R[40],E,E,0,[[["src"]],[R[35]]]],[11,R[41],E,E,0,[[],[R[35]]]],[11,R[42],E,E,0,[[],[R[35]]]],[11,R[43],E,E,0,[[["src"]],[R[35]]]],[11,R[36],E,E,0,[[["src"]],[R[35]]]],[11,R[37],E,E,0,[[],[R[35]]]],[11,"as_any",E,E,0,[[["self"]],["any"]]],[11,R[44],E,E,0,[[["self"]],["any"]]],[11,"from",R[38],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[36],E,E,1,[[[U]],[R[35]]]],[11,R[37],E,E,1,[[],[R[35]]]],[11,R[39],E,E,1,[[["self"]],[T]]],[11,R[49],E,E,1,[[["self"]],[T]]],[11,R[46],E,E,1,[[["self"]],[R[50]]]],[11,R[40],E,E,1,[[["src"]],[R[35]]]],[11,R[41],E,E,1,[[],[R[35]]]],[11,R[42],E,E,1,[[],[R[35]]]],[11,R[43],E,E,1,[[["src"]],[R[35]]]],[11,R[36],E,E,1,[[["src"]],[R[35]]]],[11,R[37],E,E,1,[[],[R[35]]]],[11,"as_any",E,E,1,[[["self"]],["any"]]],[11,R[44],E,E,1,[[["self"]],["any"]]],[11,"from",R[45],E,2,[[[T]],[T]]],[11,R[47],E,E,2,[[["self"]],[T]]],[11,R[48],E,E,2,[[["self"],[T]]]],[11,"into",E,E,2,[[],[U]]],[11,R[36],E,E,2,[[[U]],[R[35]]]],[11,R[37],E,E,2,[[],[R[35]]]],[11,R[39],E,E,2,[[["self"]],[T]]],[11,R[49],E,E,2,[[["self"]],[T]]],[11,R[46],E,E,2,[[["self"]],[R[50]]]],[11,R[40],E,E,2,[[["src"]],[R[35]]]],[11,R[41],E,E,2,[[],[R[35]]]],[11,R[42],E,E,2,[[],[R[35]]]],[11,R[43],E,E,2,[[["src"]],[R[35]]]],[11,R[36],E,E,2,[[["src"]],[R[35]]]],[11,R[37],E,E,2,[[],[R[35]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[47],E,E,3,[[["self"]],[T]]],[11,R[48],E,E,3,[[["self"],[T]]]],[11,"into",E,E,3,[[],[U]]],[11,R[36],E,E,3,[[[U]],[R[35]]]],[11,R[37],E,E,3,[[],[R[35]]]],[11,R[39],E,E,3,[[["self"]],[T]]],[11,R[49],E,E,3,[[["self"]],[T]]],[11,R[46],E,E,3,[[["self"]],[R[50]]]],[11,R[40],E,E,3,[[["src"]],[R[35]]]],[11,R[41],E,E,3,[[],[R[35]]]],[11,R[42],E,E,3,[[],[R[35]]]],[11,R[43],E,E,3,[[["src"]],[R[35]]]],[11,R[36],E,E,3,[[["src"]],[R[35]]]],[11,R[37],E,E,3,[[],[R[35]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[47],E,E,4,[[["self"]],[T]]],[11,R[48],E,E,4,[[["self"],[T]]]],[11,"into",E,E,4,[[],[U]]],[11,R[36],E,E,4,[[[U]],[R[35]]]],[11,R[37],E,E,4,[[],[R[35]]]],[11,R[39],E,E,4,[[["self"]],[T]]],[11,R[49],E,E,4,[[["self"]],[T]]],[11,R[46],E,E,4,[[["self"]],[R[50]]]],[11,R[40],E,E,4,[[["src"]],[R[35]]]],[11,R[41],E,E,4,[[],[R[35]]]],[11,R[42],E,E,4,[[],[R[35]]]],[11,R[43],E,E,4,[[["src"]],[R[35]]]],[11,R[36],E,E,4,[[["src"]],[R[35]]]],[11,R[37],E,E,4,[[],[R[35]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[47],E,E,5,[[["self"]],[T]]],[11,R[48],E,E,5,[[["self"],[T]]]],[11,"into",E,E,5,[[],[U]]],[11,R[36],E,E,5,[[[U]],[R[35]]]],[11,R[37],E,E,5,[[],[R[35]]]],[11,R[39],E,E,5,[[["self"]],[T]]],[11,R[49],E,E,5,[[["self"]],[T]]],[11,R[46],E,E,5,[[["self"]],[R[50]]]],[11,R[40],E,E,5,[[["src"]],[R[35]]]],[11,R[41],E,E,5,[[],[R[35]]]],[11,R[42],E,E,5,[[],[R[35]]]],[11,R[43],E,E,5,[[["src"]],[R[35]]]],[11,R[36],E,E,5,[[["src"]],[R[35]]]],[11,R[37],E,E,5,[[],[R[35]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[36],E,E,6,[[[U]],[R[35]]]],[11,R[37],E,E,6,[[],[R[35]]]],[11,R[39],E,E,6,[[["self"]],[T]]],[11,R[49],E,E,6,[[["self"]],[T]]],[11,R[46],E,E,6,[[["self"]],[R[50]]]],[11,R[40],E,E,6,[[["src"]],[R[35]]]],[11,R[41],E,E,6,[[],[R[35]]]],[11,R[42],E,E,6,[[],[R[35]]]],[11,R[43],E,E,6,[[["src"]],[R[35]]]],[11,R[36],E,E,6,[[["src"]],[R[35]]]],[11,R[37],E,E,6,[[],[R[35]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[36],E,E,7,[[[U]],[R[35]]]],[11,R[37],E,E,7,[[],[R[35]]]],[11,R[39],E,E,7,[[["self"]],[T]]],[11,R[49],E,E,7,[[["self"]],[T]]],[11,R[46],E,E,7,[[["self"]],[R[50]]]],[11,R[40],E,E,7,[[["src"]],[R[35]]]],[11,R[41],E,E,7,[[],[R[35]]]],[11,R[42],E,E,7,[[],[R[35]]]],[11,R[43],E,E,7,[[["src"]],[R[35]]]],[11,R[36],E,E,7,[[["src"]],[R[35]]]],[11,R[37],E,E,7,[[],[R[35]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[36],E,E,8,[[[U]],[R[35]]]],[11,R[37],E,E,8,[[],[R[35]]]],[11,R[39],E,E,8,[[["self"]],[T]]],[11,R[49],E,E,8,[[["self"]],[T]]],[11,R[46],E,E,8,[[["self"]],[R[50]]]],[11,R[40],E,E,8,[[["src"]],[R[35]]]],[11,R[41],E,E,8,[[],[R[35]]]],[11,R[42],E,E,8,[[],[R[35]]]],[11,R[43],E,E,8,[[["src"]],[R[35]]]],[11,R[36],E,E,8,[[["src"]],[R[35]]]],[11,R[37],E,E,8,[[],[R[35]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[36],E,E,9,[[[U]],[R[35]]]],[11,R[37],E,E,9,[[],[R[35]]]],[11,R[39],E,E,9,[[["self"]],[T]]],[11,R[49],E,E,9,[[["self"]],[T]]],[11,R[46],E,E,9,[[["self"]],[R[50]]]],[11,R[40],E,E,9,[[["src"]],[R[35]]]],[11,R[41],E,E,9,[[],[R[35]]]],[11,R[42],E,E,9,[[],[R[35]]]],[11,R[43],E,E,9,[[["src"]],[R[35]]]],[11,R[36],E,E,9,[[["src"]],[R[35]]]],[11,R[37],E,E,9,[[],[R[35]]]],[11,"from",R[51],E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[36],E,E,10,[[[U]],[R[35]]]],[11,R[37],E,E,10,[[],[R[35]]]],[11,R[39],E,E,10,[[["self"]],[T]]],[11,R[49],E,E,10,[[["self"]],[T]]],[11,R[46],E,E,10,[[["self"]],[R[50]]]],[11,R[40],E,E,10,[[["src"]],[R[35]]]],[11,R[41],E,E,10,[[],[R[35]]]],[11,R[42],E,E,10,[[],[R[35]]]],[11,R[43],E,E,10,[[["src"]],[R[35]]]],[11,R[36],E,E,10,[[["src"]],[R[35]]]],[11,R[37],E,E,10,[[],[R[35]]]],[11,"as_any",E,E,10,[[["self"]],["any"]]],[11,R[44],E,E,10,[[["self"]],["any"]]],[11,"as_ref",R[45],E,9,[[["self"]],["str"]]],[11,"clone",E,E,2,[[["self"]],[R[5]]]],[11,"clone",E,E,3,[[["self"]],["gamemetadata"]]],[11,"clone",E,E,4,[[["self"]],["gamesmetadata"]]],[11,"clone",E,E,5,[[["self"]],["gameconfig"]]],[11,R[52],E,E,2,[[["self"],["__s"]],[R[35]]]],[11,R[52],E,E,3,[[["self"],["__s"]],[R[35]]]],[11,R[52],E,E,4,[[["self"],["__s"]],[R[35]]]],[11,R[52],E,E,5,[[["self"],["__s"]],[R[35]]]],[11,R[52],E,E,9,[[["self"],["__s"]],[R[35]]]],[11,R[52],E,E,6,[[["self"],["__s"]],[R[35]]]],[11,R[52],E,E,7,[[["self"],["__s"]],[R[35]]]],[11,R[53],E,E,2,[[["__d"]],[R[35]]]],[11,R[53],E,E,3,[[["__d"]],[R[35]]]],[11,R[53],E,E,4,[[["__d"]],[R[35]]]],[11,R[53],E,E,5,[[["__d"]],[R[35]]]],[11,R[53],E,E,9,[[["__d"]],[R[35]]]],[11,R[53],E,E,6,[[["__d"]],[R[35]]]],[11,R[53],E,E,7,[[["__d"]],[R[35]]]],[11,"render",R[34],R[54],0,[[["self"],["bump"]],["node"]]],[11,"render",R[38],R[54],1,[[["self"],["bump"]],["node"]]],[11,"render",R[51],E,10,[[["self"],["bump"]],["node"]]]],"p":[[3,R[55]],[3,R[56]],[3,"Size2d"],[3,R[57]],[3,R[58]],[3,R[59]],[3,"Card"],[3,R[60]],[3,R[61]],[4,R[62]],[3,R[63]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);