{
  "title": "start_route_template_render_tour",
  "steps": [
    {
      "file": "webfolder/mem6/index.html",
      "line": 82,
      "description": "The browser downloads the index.html file as usual. \nThis <script> element imports and init the wasm code.  \nA simple web file server is enough. \nWarning: the index.html cannot be served from local file without a server, because importing modules is not allowed then for security reasons.\nI will try to use only Rust+Wasm and avoid JavaScript as much as possible."
    },
    {
      "file": "mem6/src/lib.rs",
      "line": 299,
      "description": "Rust is a great language to compile to Wasm/WebAssembly.\nWith the use of libraries wasm_bindgen, web_sys and js_sys Rust has access to the browser javascript environment. So it can do most of the things that JavaScript can do.  \nThe imported Wasm module will automatically start the function with attribute `#[wasm_bindgen(start)]`. This function is called only once. ",
      "selection": {
        "start": {
          "line": 296,
          "character": 1
        },
        "end": {
          "line": 296,
          "character": 23
        }
      }
    },
    {
      "file": "mem6/src/lib.rs",
      "line": 306,
      "description": "The Rust code will change just the content of the <div id=\"div_for_virtual_dom\">. \nThis is a \"single page web app\". For the browser the index.html is always the same, we only change the interior content of it's dom. ",
      "selection": {
        "start": {
          "line": 306,
          "character": 61
        },
        "end": {
          "line": 306,
          "character": 80
        }
      }
    },
    {
      "file": "webfolder/mem6/index.html",
      "line": 77,
      "description": "This div is the only part of the index.html that will be dynamically changed by the Rust code.  \nThe download of a big wasm file can take some time on slow network. It is nice to warn the user about that.  "
    },
    {
      "file": "webfolder/mem6/index.html",
      "line": 66,
      "description": "Wasm is using the javascript engine deep inside.  \nIf JavaScript is disabled, also wasm cannot run.  "
    },
    {
      "file": "mem6/src/lib.rs",
      "line": 325,
      "description": " After preparing the environment (websocket, RootRenderingComponent, vdom, fetch config data) I start the router. It will listen to the event `hashchange`.  \n For example when the URL changes to index.html#p04."
    },
    {
      "file": "mem6/src/routerimplmod.rs",
      "line": 45,
      "description": "The short_local_route (url hash) `ex. #p04` defines a `local_route`. This is the name of the html template to fetch from the web server. Than it is prepared and saved in html_template sub_templates fields.\nThe data in the struct is prepared, finally we call `vdom.schedule_render();`."
    },
    {
      "file": "mem6/src/rootrenderingcomponentmod.rs",
      "line": 51,
      "description": "This is the only method that is called when the rendering is scheduled. \nIt is defined in the crate `dodrio: the vdom library`.   \nFrom here we then call functions to render different UI depending on the data state. ",
      "selection": {
        "start": {
          "line": 62,
          "character": 18
        },
        "end": {
          "line": 62,
          "character": 45
        }
      }
    },
    {
      "file": "mem6/Cargo.toml",
      "line": 29,
      "description": "<github.com/fitzgen/dodrio> is a virtual DOM library for Rust+Wasm.  \nThe vdom approach aims to make it easier for the developer to think about the dom changes. The classic approach is to react to en event and then programatically modify the dom. The problem is that it becomes quickly very complex. It is difficult to think (and test) an outcome after a long sequence of events.  \nIt is easier to think about the dom as a \"state machine\". The virtual dom is rendered from scratch every single time. The rendering depends only on the `state data` that is now in the data model (a struct called RootRenderingComponent). So changing this struct (data model) and scheduling the rendering, will result in a different vdom. No other complications around that. Pure simple. Easy to think, easy to test.     \nThen the original dom is modified to resemble the vdom. Modifying the dom is slow. To make it efficient, there is some smart caching and diff-ing in the library, to make the number of changes as small and efficient as possible.  \nIn this way we have a clear separation between data (RootRenderingComponent) and UI (code to render html virtual dom).  "
    },
    {
      "file": "mem6/Cargo.toml",
      "line": 31,
      "description": "If the newest version of dodrio on crates.io is not actual enought,  \nin cargo.toml we can depend on github or local path also.  \nSo we can follow the codeflow and change something if we need to.  "
    },
    {
      "file": "mem6/src/rootrenderingcomponentmod.rs",
      "line": 22,
      "description": "The struct RootRenderingComponent contains ALL the data that is needed to render the UI. I separated the data in sub-structs, just for clarity.  \nWhen an event occures, we just change the data and then schedule the rendering.  \nInside the event code we don't bother about the dom change !    \nWe have a clear separation between data and User-Interface because of that.  \n"
    },
    {
      "file": "mem6/src/rootrenderingcomponentmod.rs",
      "line": 64,
      "description": "The function `render_template` will read the html of the template and create dodrio vdom elements in the same sort order. Before some elements/attributes there are comments or `data-` attributes that change the next element/attribute. These are not visible, so the template is still a regular html document that the graphical designer can look and modify statically without dinamic elements. The programmer than adds/modify the `replace elements or attributes`.  \nThe result is the `dodrio:Node` that represents the vdom.  \nThe vdom library then diffs and modify the real dom.  "
    },
    {
      "file": "webfolder/mem6/p05_choose_game.html",
      "line": 23,
      "description": "Here we can see a html template with the replace `comments` ex. <!--t=game_name--> and `data- attributes` ex. `data-on-click=\"game_type_left_onclick\"`.",
      "selection": {
        "start": {
          "line": 17,
          "character": 24
        },
        "end": {
          "line": 17,
          "character": 62
        }
      }
    },
    {
      "file": "mem6/src/htmltemplateimplmod.rs",
      "line": 41,
      "description": "This fn will replace the next text element after <!--t=fn_name--> or the next attribute value after `data-t-style=\"fn_name\"` with a string."
    },
    {
      "file": "mem6/src/htmltemplateimplmod.rs",
      "line": 261,
      "description": "This fn will replace the next element after <!--n=fn_name--> with a Node."
    },
    {
      "file": "mem6/src/htmltemplateimplmod.rs",
      "line": 296,
      "description": "This fn will replace the next element after <!--vn=fn_name--> with a Vector of Nodes."
    },
    {
      "file": "mem6/src/htmltemplateimplmod.rs",
      "line": 19,
      "description": "This fn will remove the next element after <!--b=fn_name--> if the result is `false`."
    },
    {
      "file": "mem6/src/htmltemplateimplmod.rs",
      "line": 98,
      "description": "This fn will add a listener to the element after `data-on-click=\"fn_name\"`."
    }
  ],
  "description": "The first tour describes the start of the wasm module, the routing, the html templating and finally rendering."
}