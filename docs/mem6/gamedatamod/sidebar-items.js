initSidebarItems({"constant":[["_IMPL_DESERIALIZE_FOR_Card",""],["_IMPL_DESERIALIZE_FOR_CardStatusCardFace",""],["_IMPL_DESERIALIZE_FOR_GameConfig",""],["_IMPL_DESERIALIZE_FOR_GameMetadata",""],["_IMPL_DESERIALIZE_FOR_GamesMetadata",""],["_IMPL_DESERIALIZE_FOR_MsgInQueue",""],["_IMPL_DESERIALIZE_FOR_Size2d",""],["_IMPL_SERIALIZE_FOR_Card",""],["_IMPL_SERIALIZE_FOR_CardStatusCardFace",""],["_IMPL_SERIALIZE_FOR_GameConfig",""],["_IMPL_SERIALIZE_FOR_GameMetadata",""],["_IMPL_SERIALIZE_FOR_GamesMetadata",""],["_IMPL_SERIALIZE_FOR_MsgInQueue",""],["_IMPL_SERIALIZE_FOR_Size2d",""]],"enum":[["CardStatusCardFace","the 3 possible statuss of one card"]],"fn":[["prepare_players_ws_uid","from the vector of players prepare a json string for the ws server so that it can send the msgs only to the players"]],"struct":[["Card","all the data for one card"],["GameConfig","game config"],["GameData","game data"],["GameMetadata","game metadata (for the vector)"],["GamesMetadata","games metadata vector"],["MsgInQueue","save the message in queue to resend it if timeout expires"],["Size2d","2d size (any UM -pixel, items, percent)"]]});